/**
 * @file: check-secret-value.js
 * @description: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞ GOOGLE_SA_PRIVATE_KEY
 * @created: 2025-08-25
 */

const https = require('https');

const KOYEB_API_KEY = 'tivfln10b7999kqb3jwaf5dg705ttlmnlqyi7w7t6mns5nt2iq27bo9f5igya1ir';
const SECRET_ID = 'deaa7fae-efdf-434d-a979-b4e96ec9c916'; // GOOGLE_SA_PRIVATE_KEY

function makeRequest(options) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => body += chunk);
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve({ status: res.statusCode, data: response });
        } catch (e) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', reject);
    req.end();
  });
}

async function checkSecretValue() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ GOOGLE_SA_PRIVATE_KEY...');
  
  const options = {
    hostname: 'app.koyeb.com',
    path: `/v1/secrets/${SECRET_ID}`,
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${KOYEB_API_KEY}`,
      'Content-Type': 'application/json'
    }
  };

  try {
    const response = await makeRequest(options);
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
    
    if (response.status === 200 && response.data.secret) {
      const secret = response.data.secret;
      console.log('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∫—Ä–µ—Ç–µ:');
      console.log(`   ID: ${secret.id}`);
      console.log(`   –ò–º—è: ${secret.name}`);
      console.log(`   –¢–∏–ø: ${secret.type}`);
      console.log(`   –°–æ–∑–¥–∞–Ω: ${secret.created_at}`);
      
      if (secret.value) {
        console.log('üîë –ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞:');
        console.log('---');
        console.log(secret.value);
        console.log('---');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
        if (secret.value.includes('-----BEGIN PRIVATE KEY-----')) {
          console.log('‚úÖ –§–æ—Ä–º–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π - —Å–æ–¥–µ—Ä–∂–∏—Ç BEGIN PRIVATE KEY');
        } else {
          console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç - –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BEGIN PRIVATE KEY');
        }
        
        if (secret.value.includes('\\n')) {
          console.log('‚úÖ –°–æ–¥–µ—Ä–∂–∏—Ç \\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫');
        } else {
          console.log('‚ùå –ù–µ —Å–æ–¥–µ—Ä–∂–∏—Ç \\n –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫');
        }
      } else {
        console.log('‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      }
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–∫—Ä–µ—Ç');
      console.log('–û—Ç–≤–µ—Ç:', response.data);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkSecretValue().catch(console.error);
