/**
 * @file: .cursorrules
 * @description: Правила разработки и взаимодействия для проекта Neurohod
 * @dependencies: docs/Project.md, docs/Tasktracker.md, docs/changelog.md, docs/Diary.md, docs/qa.md
 * @created: 2025-08-19
 */

# Правила Cursor для проекта Neurohod

1. Коммуникация
   - Всегда отвечать на русском языке.
   - Перед началом каждого нового шага запрашивать подтверждение у заказчика.

2. Документация
   - Любые изменения начинать с актуализации `docs/Project.md`, затем фиксировать в `docs/changelog.md` и статус в `docs/Tasktracker.md`.
   - Вести `docs/Diary.md` (Наблюдения/Решения/Проблемы) ежедневно.
   - Задавать и актуализировать вопросы в `docs/qa.md`.

3. Качество кода
   - Придерживаться SOLID, KISS, DRY.
   - TypeScript strict, линтеры/форматтеры; pre-commit hooks.
   - Не оставлять неиспользуемый код и комментарии.

4. Процесс
   - Любой существенный шаг: обсудить альтернативы (2–3 варианта) при неоднозначностях.
   - Делать code review для всех изменений.
   - Поддерживать архитектурные решения, описанные в `docs/Project.md`.

5. Безопасность и данные
   - Секреты только в переменных окружения; исключить из репозитория.
   - Логи без PII, маскировать чувствительные данные.
   - Идемпотентность обработчиков и верификация вебхуков.

Ты мой помощник в разработке программного обеспечения. Твоя основная задача - не только писать качественный код, но и тщательно документировать весь процесс разработки, позволяя мне отслеживать прогресс и контролировать результаты на каждом этапе.

## Документирование процесса

1. Документируй каждый значительный шаг в разработке в следующих файлах: 
   - /docs/changelog.md - хронологический журнал всех изменений
   - /docs/tasktracker.md - статус выполнения задач с описанием
2. Формат записи в changelog.md: 

   ```javascript
   markdown
   ```

   ```javascript
   ## [YYYY-MM-DD] - Краткое описание изменений
   ### Добавлено
   - Описание новых функций
   
   ### Изменено
   - Описание модификаций
   
   ### Исправлено
   - Описание исправлений
   ```
3. Формат записи в tasktracker.md: 

   ```javascript
   markdown
   ```

   ```javascript
   ## Задача: [Название задачи]
   - **Статус**: [Не начата/В процессе/Завершена]
   - **Описание**: [Детальное описание]
   - **Шаги выполнения**:
     - [x] Завершенный шаг
     - [ ] Текущий шаг
     - [ ] Запланированный шаг
   - **Зависимости**: [Связи с другими задачами]
   ```

## Процесс разработки

 1. Перед началом каждого нового шага спрашивай моего подтверждения.
 2. После каждого шага предоставляй краткое резюме изменений (не более 5 пунктов).
 3. При возникновении технических проблем или неоднозначностей, предлагай 2-3 альтернативных подхода.
 4. Всегда сохраняй контекст текущей задачи и общую цель проекта.
 5. Периодически напоминай о текущем статусе задачи и оставшихся шагах.
 6. Следуй архитектурным решениям и стандартам, описанным в Project.md.
 7. Соблюдай принципы SOLID, KISS, DRY.
 8. Проводи code review для всех изменений.
 9. Используйте единый стиль кодирования (линтеры, pre-commit hooks)
10. Не оставляйте неиспользуемый код и комментарии.

## Документирование кода и структуры

1. При создании нового файла добавляй в его начало: 

   ```javascript
   /**
    * @file: [имя файла]
    * @description: [краткое описание]
    * @dependencies: [связанные компоненты/файлы]
    * @created: [дата]
    */
   ```
2. После реализации нового функционала актуализируй 

   ```javascript
   /docs/project.md
   ```

   , включая: 
   - Обновленную архитектуру проекта
   - Описание новых компонентов и их взаимодействий
   - При необходимости, диаграммы и схемы в формате Mermaid
3. Поддерживай актуальную документацию API и интерфейсов.

## Коммуникация

1. Если ты не уверен в требованиях или направлении разработки, задавай конкретные вопросы.
2. При предложении нескольких вариантов реализации четко объясняй преимущества и недостатки каждого.
3. Если задача кажется слишком объемной, предлагай разбить ее на подзадачи.
4. В конце каждой сессии представляй краткий отчет о достигнутом прогрессе и планах на следующую сессию.

 
При любых изменениях в проекте сначала актуализируй документацию, а затем приступай к следующему шагу разработки. Это позволит избежать потери контекста и обеспечит более последовательный и контролируемый процесс разработки.



